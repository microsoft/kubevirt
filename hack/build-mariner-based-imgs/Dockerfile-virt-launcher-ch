ARG BUILDER_IMAGE
FROM $BUILDER_IMAGE AS builder
WORKDIR /workspace

RUN --mount=type=bind,rw,target=. \
    hack/build-mariner-based-imgs/slim-build.sh /build \
      cmd/virt-launcher \
      cmd/virt-launcher-monitor \
      cmd/virt-freezer \
      cmd/virt-probe \
      cmd/virt-tail

FROM mcr.microsoft.com/azurelinux/base/core:3.0
ARG TARGETARCH="amd64"
ARG ADDITIONAL_RPMS_DIR

COPY ${ADDITIONAL_RPMS_DIR} /root/additionalRpms
RUN <<EOF
echo "[additional_rpms]" > /etc/yum.repos.d/additionalRpms.repo
echo "name=Additional RPMs" >> /etc/yum.repos.d/additionalRpms.repo
echo "baseurl=file:///root/additionalRpms" >> /etc/yum.repos.d/additionalRpms.repo
echo "enabled=1" >> /etc/yum.repos.d/additionalRpms.repo
echo "gpgcheck=0" >> /etc/yum.repos.d/additionalRpms.repo
EOF

RUN tdnf -y install azurelinux-repos-extended.noarch
RUN tdnf -y install \
  augeas \
  ca-certificates \
  iptables \
  json-c-devel \
  libcap \
  libvirt-client \
  nftables \
  qemu-tools \
  socat \
  tar \
  xorriso \
  procps \
  edk2-cloud-hypervisor \
  libvirt \
  libvirt-daemon-driver-ch \
  cloud-hypervisor \
  vim \
  wget \
  qemu-system-x86 # TODO Needed for virsh getcapabilities
  # TODO Remove when this task is completed https://dev.azure.com/mariner-org/ECF/_queries/edit/4984/?triage=true

RUN if [ "$TARGETARCH" = "amd64" ]; then \
    # required for OVMF files \
    tdnf -y install  edk2-ovmf; \
    ln -s ../edk2/ovmf/OVMF_CODE.fd /usr/share/OVMF/OVMF_CODE.cc.fd; \
    fi;

# XXX - This will not run as edk2 is not built for arm64
RUN if [ "$TARGETARCH" = "arm64" ]; then \
    # required for OVMF files  \
    tdnf -y install  edk2-aarch64; \
    fi;

RUN  tdnf clean all \
   && cd /var && rm -rf run && ln -s ../run .

USER 0

# Copy files from the builder
COPY --from=builder /build/_out/cmd/container-disk-v2alpha/container-disk /usr/bin/
COPY --from=builder /build/_out/cmd/virt-launcher/virt-launcher /usr/bin/
COPY --from=builder /build/_out/cmd/virt-launcher-monitor/virt-launcher-monitor /usr/bin/
COPY --from=builder /build/_out/cmd/virt-freezer/virt-freezer /usr/bin/
COPY --from=builder /build/_out/cmd/virt-probe/virt-probe /usr/bin/
COPY --from=builder /build/cmd/virt-launcher/node-labeller/node-labeller.sh /usr/bin/
COPY --from=builder /build/_out/cmd/virt-tail/virt-tail /usr/bin/
RUN mkdir -p /usr/share/kube-virt/virt-launcher
COPY --from=builder /build/cmd/virt-launcher/nsswitch.conf /usr/share/kube-virt/virt-launcher/

# Setup permissions and capabilities for non-root VMIs. KubeVirt sets
# XDG_* directories to /var/run.
RUN setcap 'cap_net_bind_service=+ep' /usr/bin/virt-launcher
RUN setcap 'cap_net_bind_service=+ep' /usr/bin/virt-launcher-monitor
RUN chmod 0755 /etc/libvirt

RUN cp /usr/share/kube-virt/virt-launcher/nsswitch.conf /etc/

RUN echo "log_level = 1" >> /etc/libvirt/virtchd.conf
RUN echo "log_outputs=\"1:file:/var/log/libvirt/libvirtd.log\"" >> /etc/libvirt/libvirtd.conf

RUN ls /usr/bin/virt-launcher

RUN mkdir -p /run/lock

# Add more tools in virt-launcher for generating cloudinit for CH VMs
RUN tdnf install -y dosfstools

ENTRYPOINT [ "/usr/bin/virt-launcher" ]
